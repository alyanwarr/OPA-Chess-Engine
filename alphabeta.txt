
https://onedrive.live.com/?authkey=%21ACz5Z6sbS33vVio&id=D4629BC8D856F7D5%21894&cid=D4629BC8D856F7D5

public Position alphaBeta(int player, Position position, int alpha, int beta, int depth){
        if(depth == 0) return position;
        Position best_position = null;
        MoveGenerator move_generator = new MoveGenerator(position,player);
        move_generator.generateMoves();
        Position[] positions = move_generator.getPositions();
        if(positions.length == 0) return position;    
        
        Evaluator evaluator = new Evaluator();        
        for(Position _position:positions){
            if(best_position == null) 
                best_position = _position;
            if(player == GameData.HUMAN){
            
                Position opponent_position = alphaBeta(GameData.COMPUTER,_position,alpha,beta,depth-1);                
                int score = evaluator.evaluate(opponent_position);
                //if(score>=beta && level > 4) return _position;
                if(score>alpha){
                    best_position = _position;
                    alpha = score;
                }
            }else{
                Position opponent_position = alphaBeta(GameData.HUMAN,_position,alpha,beta,depth-1);                
                if(new Game(opponent_position).isChecked(GameData.HUMAN)){
                    return _position;
                }
                int score = evaluator.evaluate(opponent_position);
                if(score<=alpha && level > 4) return _position;
                if(score<beta){
                    best_position = _position;
                    beta = score;
                }              
            }
        }
        return best_position;
    }
    
    
    
    ====================================================================================
    
    
    public String alphabeta(int player, Board b,int alpha,int beta,int depth){
        String best_move = null;
        Board temp_board = new Board();
        temp_board = temp_board.boardcopy(b, temp_board);
        int temp_player = CommonMethods.player;
        boolean temp_castl = CommonMethods.castling;
        boolean temp_en_pt = CommonMethods.en_passant;
        boolean temp_w_k_c = CommonMethods.white_king_checked;
        boolean temp_w_b_c = CommonMethods.black_king_checked;
        CommonMethods.player = player;
        ArrayList<String> moves = b.next_moves(player);
        CommonMethods.player = temp_player;
        if (moves.isEmpty()) {
            return null;
        }
        for (String m : moves) {
            CommonMethods.player = temp_player;
            CommonMethods.en_passant = temp_en_pt;
            CommonMethods.castling = temp_castl;
            CommonMethods.white_king_checked = temp_w_k_c;
            CommonMethods.black_king_checked = temp_w_b_c;
            temp_board = temp_board.boardcopy(b, temp_board);
            if (best_move == null) {
                best_move = m;
            }
            int score;
            CommonMethods.player = player;
            temp_board.apply_move(m);
            CommonMethods.player = temp_player;
            if (CommonMethods.player == player) {
                if (depth <= 0) {
                    score = evaluate(temp_board, player);
                } else { 
                    String returned;
                    if(player == 1){
                        returned = alphabeta(2,temp_board, alpha, beta, depth-1);
                        CommonMethods.player = 2;
                        temp_board.apply_move(returned);
                        CommonMethods.player = temp_player;
                        score = evaluate(temp_board, player);
                    }else{
                        returned = alphabeta(1,temp_board, alpha, beta, depth-1);
                        CommonMethods.player = 1;
                        temp_board.apply_move(returned);
                        CommonMethods.player = temp_player;
                        score = evaluate(temp_board, player);
                    }       
                }
                if ((CommonMethods.player == 2 && CommonMethods.white_king_checked == true) || (CommonMethods.player == 1 && CommonMethods.black_king_checked == true)) {
                    CommonMethods.player = temp_player;
                    CommonMethods.en_passant = temp_en_pt;
                    CommonMethods.castling = temp_castl;
                    CommonMethods.white_king_checked = temp_w_k_c;
                    CommonMethods.black_king_checked = temp_w_b_c;
                    best_move = m;
                    return best_move;
                }
                if (score > alpha) {
                    best_move = m;
                    alpha = score;
                }
                if (beta <= alpha) {
                    CommonMethods.player = temp_player;
                    CommonMethods.en_passant = temp_en_pt;
                    CommonMethods.castling = temp_castl;
                    CommonMethods.white_king_checked = temp_w_k_c;
                    CommonMethods.black_king_checked = temp_w_b_c;
                    best_move = m;
                    return best_move;
                }
            } else {
                if (depth <= 0) {
                    score = evaluate(temp_board, player);
                } else { 
                    String returned;
                    if(player == 1){
                        returned = alphabeta(2,temp_board, alpha, beta, depth-1);
                        CommonMethods.player = 2;
                        temp_board.apply_move(returned);
                        CommonMethods.player = temp_player;
                        score = evaluate(temp_board, player);
                    }else{
                        returned = alphabeta(1,temp_board, alpha, beta, depth-1);
                        CommonMethods.player = 1;
                        temp_board.apply_move(returned);
                        CommonMethods.player = temp_player;
                        score = evaluate(temp_board, player);
                    }       
                }
                if ((CommonMethods.player == 1 && CommonMethods.white_king_checked == true) || (CommonMethods.player == 2 && CommonMethods.black_king_checked == true)) {
                    CommonMethods.player = temp_player;
                    CommonMethods.en_passant = temp_en_pt;
                    CommonMethods.castling = temp_castl;
                    CommonMethods.white_king_checked = temp_w_k_c;
                    CommonMethods.black_king_checked = temp_w_b_c;
                    best_move = m;
                    return best_move;
                }
                if (score < beta) {
                    best_move = m;
                    beta = score;
                }
                if (beta <= alpha) {
                    CommonMethods.player = temp_player;
                    CommonMethods.en_passant = temp_en_pt;
                    CommonMethods.castling = temp_castl;
                    CommonMethods.white_king_checked = temp_w_k_c;
                    CommonMethods.black_king_checked = temp_w_b_c;
                    return best_move;
                }
            }
        }
        CommonMethods.player = temp_player;
        CommonMethods.en_passant = temp_en_pt;
        CommonMethods.castling = temp_castl;
        CommonMethods.white_king_checked = temp_w_k_c;
        CommonMethods.black_king_checked = temp_w_b_c;
        return best_move;
    }